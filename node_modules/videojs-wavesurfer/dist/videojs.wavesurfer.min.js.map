{"version":3,"sources":["webpack://VideojsWavesurfer/webpack/universalModuleDefinition","webpack://VideojsWavesurfer/webpack/bootstrap","webpack://VideojsWavesurfer/external \"WaveSurfer\"","webpack://VideojsWavesurfer/external \"videojs\"","webpack://VideojsWavesurfer/(webpack)/buildin/global.js","webpack://VideojsWavesurfer/./node_modules/global/window.js","webpack://VideojsWavesurfer/./src/js/defaults.js","webpack://VideojsWavesurfer/./src/js/utils/format-time.js","webpack://VideojsWavesurfer/./src/js/utils/log.js","webpack://VideojsWavesurfer/./src/js/videojs.wavesurfer.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","g","this","Function","eval","e","global","win","self","debug","msDisplayMax","seconds","guide","Math","floor","h","gm","gh","ms","isNaN","Infinity","args","logType","videojs","log","error","warn","Plugin","_video2","default","getPlugin","Wavesurfer","player","options","_classCallCheck","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","addClass","mergeOptions","_defaults2","waveReady","waveFinished","liveMode","toString","parseFloat","textTracksEnabled","options_","tracks","length","src","undefined","_wavesurfer2","microphone","onWaveError","one","initialize","bigPlayButton","hide","usingNativeControls_","tech_","el_","controls","controlBar","show","style","display","progressControl","currentTimeDisplay","timeDivider","durationDisplay","forEach","element","remainingTimeDisplay","playToggle","on","onPlayToggle","mergedOptions","parseOptions","plugins","wavesurfer","surfer","onWaveFinish","surferReady","onWaveReady","surferProgress","onWaveProgress","surferSeek","onWaveSeek","setupPlaybackEvents","onVolumeChange","onScreenChange","muted","setVolume","fluid","drawer","wrapper","className","responsiveWave","util","debounce","onResizeChange","_window2","addEventListener","off","throttledUpdateContent","trackCurrentTime","startPlayers","surferOpts","rect","getBoundingClientRect","originalWidth","width","originalHeight","height","controlBarHeight","container","waveformHeight","playerHeight","opts","splitChannels","loadingSpinner","load","peaks","enable","un","url","_this2","Blob","File","JSON","stringify","loadBlob","Array","isArray","ajaxOptions","responseType","xhr","ajax","data","target","status","handlePlay","active","paused","pause","play","start","contentEl","handlePause","setCurrentTime","destroy","stopTrackingCurrentTime","children","dispose","volume","format","quality","exportImage","deviceId","_this3","setSinkId","then","result","trigger","catch","err","currentTime","getCurrentTime","duration","getDuration","time","min","formattedTime_","lastChild","textContent","_formatTime2","setDuration","autoplay","_this4","loop","stop","once","removeClass","hasClass","isPlaying","_this5","fullscreenDelay","setInterval","newWidth","newHeight","isFullscreen","redrawWaveform","clearInterval","isDestroyed","params","createDrawer","drawBuffer","progress","backend","getPlayedPercents","_log3","VERSION","registerPlugin"],"mappings":"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","file":"videojs.wavesurfer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"WaveSurfer\"), require(\"videojs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"VideojsWavesurfer\", [\"WaveSurfer\", \"videojs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VideojsWavesurfer\"] = factory(require(\"WaveSurfer\"), require(\"videojs\"));\n\telse\n\t\troot[\"VideojsWavesurfer\"] = factory(root[\"WaveSurfer\"], root[\"videojs\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","/**\n * @file defaults.js\n * @since 2.0.0\n */\n\n// plugin defaults\nconst pluginDefaultOptions = {\n    // Display console log messages.\n    debug: false,\n    // msDisplayMax indicates the number of seconds that is\n    // considered the boundary value for displaying milliseconds\n    // in the time controls. An audio clip with a total length of\n    // 2 seconds and a msDisplayMax of 3 will use the format\n    // M:SS:MMM. Clips longer than msDisplayMax will be displayed\n    // as M:SS or HH:MM:SS.\n    msDisplayMax: 3\n};\n\nexport default pluginDefaultOptions;\n","/**\n * @file format-time.js\n * @since 2.0.0\n */\n\n/**\n * Format seconds as a time string, H:MM:SS, M:SS or M:SS:MMM.\n *\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide.\n *\n * @param {number} seconds - Number of seconds to be turned into a\n *     string.\n * @param {number} guide - Number (in seconds) to model the string\n *     after.\n * @param {number} msDisplayMax - Number (in milliseconds) to model the string\n *     after.\n * @return {string} Time formatted as H:MM:SS, M:SS or M:SS:MMM, e.g.\n *     0:00:12.\n * @private\n */\nconst formatTime = function(seconds, guide, msDisplayMax) {\n    // Default to using seconds as guide\n    seconds = seconds < 0 ? 0 : seconds;\n    guide = guide || seconds;\n    let s = Math.floor(seconds % 60),\n        m = Math.floor(seconds / 60 % 60),\n        h = Math.floor(seconds / 3600),\n        gm = Math.floor(guide / 60 % 60),\n        gh = Math.floor(guide / 3600),\n        ms = Math.floor((seconds - s) * 1000);\n\n    // handle invalid times\n    if (isNaN(seconds) || seconds === Infinity) {\n        // '-' is false for all relational operators (e.g. <, >=) so this\n        // setting will add the minimum number of fields specified by the\n        // guide\n        h = m = s = ms = '-';\n    }\n\n    // Check if we need to show milliseconds\n    if (guide > 0 && guide < msDisplayMax) {\n        if (ms < 100) {\n            if (ms < 10) {\n                ms = '00' + ms;\n            } else {\n                ms = '0' + ms;\n            }\n        }\n        ms = ':' + ms;\n    } else {\n        ms = '';\n    }\n\n    // Check if we need to show hours\n    h = (h > 0 || gh > 0) ? h + ':' : '';\n\n    // If hours are showing, we may need to add a leading zero.\n    // Always show at least one digit of minutes.\n    m = (((h || gm >= 10) && m < 10) ? '0' + m : m) + ':';\n\n    // Check if leading zero is need for seconds\n    s = ((s < 10) ? '0' + s : s);\n\n    return h + m + s + ms;\n};\n\nexport default formatTime;\n","/**\n * @file log.js\n * @since 2.0.0\n */\n\nconst ERROR = 'error';\nconst WARN = 'warn';\n\n/**\n * Log message (if the debug option is enabled).\n */\nconst log = function(args, logType, debug)\n{\n    if (debug === true) {\n        if (logType === ERROR) {\n            videojs.log.error(args);\n        } else if (logType === WARN) {\n            videojs.log.warn(args);\n        } else {\n            videojs.log(args);\n        }\n    }\n};\n\nexport default log;\n","/**\n * @file videojs.wavesurfer.js\n *\n * The main file for the videojs-wavesurfer project.\n * MIT license: https://github.com/collab-project/videojs-wavesurfer/blob/master/LICENSE\n */\n\nimport log from './utils/log';\nimport formatTime from './utils/format-time';\nimport pluginDefaultOptions from './defaults';\nimport window from 'global/window';\n\nimport videojs from 'video.js';\nimport WaveSurfer from 'wavesurfer.js';\n\nconst Plugin = videojs.getPlugin('plugin');\n\nconst wavesurferClassName = 'vjs-wavedisplay';\n\n/**\n * Draw a waveform for audio and video files in a video.js player.\n *\n * @class Wavesurfer\n * @extends videojs.Plugin\n */\nclass Wavesurfer extends Plugin {\n    /**\n     * The constructor function for the class.\n     *\n     * @param {(videojs.Player|Object)} player\n     * @param {Object} options - Player options.\n     */\n    constructor(player, options) {\n        super(player, options);\n\n        // add plugin style\n        player.addClass('vjs-wavesurfer');\n\n        // parse options\n        options = videojs.mergeOptions(pluginDefaultOptions, options);\n        this.waveReady = false;\n        this.waveFinished = false;\n        this.liveMode = false;\n        this.debug = (options.debug.toString() === 'true');\n        this.msDisplayMax = parseFloat(options.msDisplayMax);\n        this.textTracksEnabled = (this.player.options_.tracks.length > 0);\n\n        // microphone plugin\n        if (options.src === 'live') {\n            // check if the wavesurfer.js microphone plugin can be enabled\n            if (WaveSurfer.microphone !== undefined) {\n                // enable audio input from a microphone\n                this.liveMode = true;\n                this.waveReady = true;\n            } else {\n                this.onWaveError('Could not find wavesurfer.js ' +\n                    'microphone plugin!');\n                return;\n            }\n        }\n\n        // wait until player ui is ready\n        this.player.one('ready', this.initialize.bind(this));\n    }\n\n    /**\n     * Player UI is ready: customize controls.\n     */\n    initialize() {\n        // hide big play button\n        this.player.bigPlayButton.hide();\n\n        // the native controls don't work for this UI so disable\n        // them no matter what\n        if (this.player.usingNativeControls_ === true) {\n            if (this.player.tech_.el_ !== undefined) {\n                this.player.tech_.el_.controls = false;\n            }\n        }\n\n        // controls\n        if (this.player.options_.controls === true) {\n            // make sure controlBar is showing\n            this.player.controlBar.show();\n            this.player.controlBar.el_.style.display = 'flex';\n\n            // progress control isn't used by this plugin\n            this.player.controlBar.progressControl.hide();\n\n            // make sure time displays are visible\n            let uiElements = [this.player.controlBar.currentTimeDisplay,\n                              this.player.controlBar.timeDivider,\n                              this.player.controlBar.durationDisplay];\n            uiElements.forEach((element) => {\n                // ignore and show when essential elements have been disabled\n                // by user\n                if (element !== undefined) {\n                    element.el_.style.display = 'block';\n                    element.show();\n                }\n            });\n            if (this.player.controlBar.remainingTimeDisplay !== undefined) {\n                this.player.controlBar.remainingTimeDisplay.hide();\n            }\n\n            // handle play toggle interaction\n            this.player.controlBar.playToggle.on(['tap', 'click'],\n                this.onPlayToggle.bind(this));\n\n            // disable play button until waveform is ready\n            // (except when in live mode)\n            if (!this.liveMode) {\n                this.player.controlBar.playToggle.hide();\n            }\n        }\n\n        // wavesurfer.js setup\n        let mergedOptions = this.parseOptions(this.player.options_.plugins.wavesurfer);\n        this.surfer = WaveSurfer.create(mergedOptions);\n        this.surfer.on('error', this.onWaveError.bind(this));\n        this.surfer.on('finish', this.onWaveFinish.bind(this));\n        if (this.liveMode === true) {\n            // listen for wavesurfer.js microphone plugin events\n            this.surfer.microphone.on('deviceError', this.onWaveError.bind(this));\n        }\n        this.surferReady = this.onWaveReady.bind(this);\n        this.surferProgress = this.onWaveProgress.bind(this);\n        this.surferSeek = this.onWaveSeek.bind(this);\n\n        // only listen to these wavesurfer.js playback events when not\n        // in live mode\n        if (!this.liveMode) {\n            this.setupPlaybackEvents(true);\n        }\n\n        // video.js player events\n        this.player.on('volumechange', this.onVolumeChange.bind(this));\n        this.player.on('fullscreenchange', this.onScreenChange.bind(this));\n\n        // make sure volume is muted when requested\n        if (this.player.muted()) {\n            this.setVolume(0);\n        }\n\n        // video.js fluid option\n        if (this.player.options_.fluid === true) {\n            // give wave element a classname so it can be styled\n            this.surfer.drawer.wrapper.className = wavesurferClassName;\n            // listen for window resize events\n            this.responsiveWave = WaveSurfer.util.debounce(\n                this.onResizeChange.bind(this), 150);\n            window.addEventListener('resize', this.responsiveWave);\n        }\n\n        // text tracks\n        if (this.textTracksEnabled) {\n            // disable timeupdates\n            this.player.controlBar.currentTimeDisplay.off(this.player, 'timeupdate',\n                this.player.controlBar.currentTimeDisplay.throttledUpdateContent);\n\n            // sets up an interval function to track current time\n            // and trigger timeupdate every 250 milliseconds.\n            // needed for text tracks\n            this.player.tech_.trackCurrentTime();\n        }\n\n        // kick things off\n        this.startPlayers();\n    }\n\n    /**\n     * Initializes the waveform options.\n     *\n     * @param {Object} surferOpts - Plugin options.\n     * @private\n     */\n    parseOptions(surferOpts) {\n        let rect = this.player.el_.getBoundingClientRect();\n        this.originalWidth = this.player.options_.width || rect.width;\n        this.originalHeight = this.player.options_.height || rect.height;\n\n        // controlbar\n        let controlBarHeight = this.player.controlBar.height();\n        if (this.player.options_.controls === true && controlBarHeight === 0) {\n            // the dimensions of the controlbar are not known yet, but we\n            // need it now, so we can calculate the height of the waveform.\n            // The default height is 30px, so use that instead.\n            controlBarHeight = 30;\n        }\n\n        // set waveform element and dimensions\n        // Set the container to player's container if \"container\" option is\n        // not provided. If a waveform needs to be appended to your custom\n        // element, then use below option. For example:\n        // container: document.querySelector(\"#vjs-waveform\")\n        if (surferOpts.container === undefined) {\n            surferOpts.container = this.player.el_;\n        }\n\n        // set the height of generated waveform if user has provided height\n        // from options. If height of waveform need to be customized then use\n        // option below. For example: waveformHeight: 30\n        if (surferOpts.waveformHeight === undefined) {\n            let playerHeight = rect.height;\n            surferOpts.height = playerHeight - controlBarHeight;\n        } else {\n            surferOpts.height = opts.waveformHeight;\n        }\n\n        // split channels\n        if (surferOpts.splitChannels && surferOpts.splitChannels === true) {\n            surferOpts.height /= 2;\n        }\n\n        // enable wavesurfer.js microphone plugin\n        if (this.liveMode === true) {\n            surferOpts.plugins = [\n                WaveSurfer.microphone.create(surferOpts)\n            ];\n            this.log('wavesurfer.js microphone plugin enabled.');\n        }\n\n        return surferOpts;\n    }\n\n    /**\n     * Start the players.\n     * @private\n     */\n    startPlayers() {\n        let options = this.player.options_.plugins.wavesurfer;\n        if (options.src !== undefined) {\n            if (this.surfer.microphone === undefined) {\n                // show loading spinner\n                this.player.loadingSpinner.show();\n\n                // start loading file\n                this.load(options.src, options.peaks);\n            } else {\n                // hide loading spinner\n                this.player.loadingSpinner.hide();\n\n                // connect microphone input to our waveform\n                options.wavesurfer = this.surfer;\n            }\n        } else {\n            // no valid src found, hide loading spinner\n            this.player.loadingSpinner.hide();\n        }\n    }\n\n    /**\n     * Starts or stops listening to events related to audio-playback.\n     *\n     * @param {boolean} enable - Start or stop listening to playback\n     *     related events.\n     * @private\n     */\n    setupPlaybackEvents(enable) {\n        if (enable === false) {\n            this.surfer.un('ready', this.surferReady);\n            this.surfer.un('audioprocess', this.surferProgress);\n            this.surfer.un('seek', this.surferSeek);\n        } else if (enable === true) {\n            this.surfer.on('ready', this.surferReady);\n            this.surfer.on('audioprocess', this.surferProgress);\n            this.surfer.on('seek', this.surferSeek);\n        }\n    }\n\n    /**\n     * Start loading waveform data.\n     *\n     * @param {string|blob|file} url - Either the URL of the audio file,\n     *     a Blob or a File object.\n     * @param {string|?number[]|number[][]} peaks - Either the URL of peaks\n     *     data for the audio file, or an array with peaks data.\n     */\n    load(url, peaks) {\n        if (url instanceof Blob || url instanceof File) {\n            this.log('Loading object: ' + JSON.stringify(url));\n            this.surfer.loadBlob(url);\n        } else {\n            // load peak data from file\n            if (peaks !== undefined) {\n                if (Array.isArray(peaks)) {\n                    // use supplied peaks data\n                    this.log('Loading URL: ' + url);\n                    this.surfer.load(url, peaks);\n                } else {\n                    // load peak data from file\n                    let ajaxOptions = {\n                        url: peaks,\n                        responseType: 'json'\n                    };\n                    // supply xhr options, if any\n                    if (this.player.options_.plugins.wavesurfer.xhr !== undefined) {\n                        ajaxOptions.xhr = this.player.options_.plugins.wavesurfer.xhr;\n                    }\n                    let ajax = WaveSurfer.util.ajax(ajaxOptions);\n\n                    ajax.on('success', (data, e) => {\n                        this.log('Loaded Peak Data URL: ' + peaks);\n                        this.surfer.load(url, data.data);\n                    });\n                    ajax.on('error', (e) => {\n                        this.log('Unable to retrieve peak data from ' + peaks +\n                            '. Status code: ' + e.target.status, 'warn');\n                        this.log('Loading URL: ' + url);\n                        this.surfer.load(url);\n                    });\n                }\n            } else {\n                // no peaks\n                this.log('Loading URL: ' + url);\n                this.surfer.load(url);\n            }\n        }\n    }\n\n    /**\n     * Start/resume playback or microphone.\n     */\n    play() {\n        // show pause button\n        this.player.controlBar.playToggle.handlePlay();\n\n        if (this.liveMode) {\n            // start/resume microphone visualization\n            if (!this.surfer.microphone.active)\n            {\n                this.log('Start microphone');\n                this.surfer.microphone.start();\n            } else {\n                // toggle paused\n                let paused = !this.surfer.microphone.paused;\n\n                if (paused) {\n                    this.pause();\n                } else {\n                    this.log('Resume microphone');\n                    this.surfer.microphone.play();\n                }\n            }\n        } else {\n            this.log('Start playback');\n\n            // put video.js player UI in playback mode\n            this.player.play();\n\n            // start surfer playback\n            this.surfer.play();\n        }\n    }\n\n    /**\n     * Pauses playback or microphone visualization.\n     */\n    pause() {\n        // show play button\n        if (this.player.controlBar.playToggle.contentEl()) {\n            this.player.controlBar.playToggle.handlePause();\n        }\n\n        if (this.liveMode) {\n            // pause microphone visualization\n            this.log('Pause microphone');\n            this.surfer.microphone.pause();\n        } else {\n            // pause playback\n            this.log('Pause playback');\n\n            if (!this.waveFinished) {\n                // pause wavesurfer playback\n                this.surfer.pause();\n            } else {\n                this.waveFinished = false;\n            }\n\n            this.setCurrentTime();\n        }\n    }\n\n    /**\n     * @private\n     */\n    dispose() {\n        if (this.surfer) {\n            if (this.liveMode && this.surfer.microphone) {\n                // destroy microphone plugin\n                this.surfer.microphone.destroy();\n                this.log('Destroyed microphone plugin');\n            }\n            // destroy wavesurfer instance\n            this.surfer.destroy();\n        }\n        if (this.textTracksEnabled) {\n            this.player.tech_.stopTrackingCurrentTime();\n        }\n        this.log('Destroyed plugin');\n    }\n\n    /**\n     * Indicates whether the plugin is destroyed or not.\n     *\n     * @return {boolean} Plugin destroyed or not.\n     */\n    isDestroyed() {\n        return this.player && (this.player.children() === null);\n    }\n\n    /**\n     * Remove the player and waveform.\n     */\n    destroy() {\n        this.player.dispose();\n    }\n\n    /**\n     * Set the volume level.\n     *\n     * @param {number} volume - The new volume level.\n     */\n    setVolume(volume) {\n        if (volume !== undefined) {\n            this.log('Changing volume to: ' + volume);\n\n            // update player volume\n            this.player.volume(volume);\n        }\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is 'image/png'. Other supported types are\n     * 'image/jpeg' and 'image/webp'.\n     *\n     * @param {string} [format=image/png] - String indicating the image format.\n     * @param {number} [quality=1] - Number between 0 and 1 indicating image\n     *     quality if the requested type is 'image/jpeg' or 'image/webp'.\n     * @returns {string} The data URI of the image data.\n     */\n    exportImage(format, quality) {\n        return this.surfer.exportImage(format, quality);\n    }\n\n    /**\n     * Change the audio output device.\n     *\n     * @param {string} sinkId - Id of audio output device.\n     */\n    setAudioOutput(deviceId) {\n        if (deviceId) {\n            this.surfer.setSinkId(deviceId).then((result) => {\n                // notify listeners\n                this.player.trigger('audioOutputReady');\n            }).catch((err) => {\n                // notify listeners\n                this.player.trigger('error', err);\n\n                this.log(err, 'error');\n            });\n        }\n    }\n\n    /**\n     * Get the current time (in seconds) of the stream during playback.\n     *\n     * Returns 0 if no stream is available (yet).\n     */\n    getCurrentTime() {\n        let currentTime = this.surfer.getCurrentTime();\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\n\n        return currentTime;\n    }\n\n    /**\n     * Updates the player's element displaying the current time.\n     *\n     * @param {number} [currentTime] - Current position of the playhead\n     *     (in seconds).\n     * @param {number} [duration] - Duration of the waveform (in seconds).\n     * @private\n     */\n    setCurrentTime(currentTime, duration) {\n        if (currentTime === undefined) {\n            currentTime = this.surfer.getCurrentTime();\n        }\n\n        if (duration === undefined) {\n            duration = this.surfer.getDuration();\n        }\n\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\n        duration = isNaN(duration) ? 0 : duration;\n        let time = Math.min(currentTime, duration);\n\n        // update current time display component\n        if (this.player.controlBar.currentTimeDisplay.contentEl()) {\n            this.player.controlBar.currentTimeDisplay.formattedTime_ =\n                this.player.controlBar.currentTimeDisplay.contentEl().lastChild.textContent =\n                    formatTime(time, duration, this.msDisplayMax);\n        }\n\n        if (this.textTracksEnabled) {\n            // only needed for text tracks\n            this.player.tech_.setCurrentTime(currentTime);\n        }\n    }\n\n    /**\n     * Get the duration of the stream in seconds.\n     *\n     * Returns 0 if no stream is available (yet).\n     */\n    getDuration() {\n        let duration = this.surfer.getDuration();\n        duration = isNaN(duration) ? 0 : duration;\n\n        return duration;\n    }\n\n    /**\n     * Updates the player's element displaying the duration time.\n     *\n     * @param {number} [duration] - Duration of the waveform (in seconds).\n     * @private\n     */\n    setDuration(duration) {\n        if (duration === undefined) {\n            duration = this.surfer.getDuration();\n        }\n        duration = isNaN(duration) ? 0 : duration;\n\n        // update duration display component\n        if (this.player.controlBar.durationDisplay.contentEl()) {\n            this.player.controlBar.durationDisplay.formattedTime_ =\n                this.player.controlBar.durationDisplay.contentEl().lastChild.textContent =\n                    formatTime(duration, duration, this.msDisplayMax);\n        }\n    }\n\n    /**\n     * Audio is loaded, decoded and the waveform is drawn.\n     *\n     * @fires waveReady\n     * @private\n     */\n    onWaveReady() {\n        this.waveReady = true;\n        this.waveFinished = false;\n        this.liveMode = false;\n\n        this.log('Waveform is ready');\n        this.player.trigger('waveReady');\n\n        // update time display\n        this.setCurrentTime();\n        this.setDuration();\n\n        // enable and show play button\n        if (this.player.controlBar.playToggle.contentEl()) {\n            this.player.controlBar.playToggle.show();\n        }\n\n        // hide loading spinner\n        if (this.player.loadingSpinner.contentEl()) {\n            this.player.loadingSpinner.hide();\n        }\n\n        // auto-play when ready (if enabled)\n        if (this.player.options_.autoplay === true) {\n            this.play();\n        }\n    }\n\n    /**\n     * Fires when audio playback completed.\n     *\n     * @fires playbackFinish\n     * @private\n     */\n    onWaveFinish() {\n        this.log('Finished playback');\n\n        // notify listeners\n        this.player.trigger('playbackFinish');\n\n        // check if loop is enabled\n        if (this.player.options_.loop === true) {\n            // reset waveform\n            this.surfer.stop();\n            this.play();\n        } else {\n            // finished\n            this.waveFinished = true;\n\n            // pause player\n            this.pause();\n\n            // show the replay state of play toggle\n            this.player.trigger('ended');\n\n            // this gets called once after the clip has ended and the user\n            // seeks so that we can change the replay button back to a play\n            // button\n            this.surfer.once('seek', () => {\n                this.player.controlBar.playToggle.removeClass('vjs-ended');\n                this.player.trigger('pause');\n            });\n        }\n    }\n\n    /**\n     * Fires continuously during audio playback.\n     *\n     * @param {number} time - Current time/location of the playhead.\n     * @private\n     */\n    onWaveProgress(time) {\n        this.setCurrentTime();\n    }\n\n    /**\n     * Fires during seeking of the waveform.\n     * @private\n     */\n    onWaveSeek() {\n        this.setCurrentTime();\n    }\n\n    /**\n     * Waveform error.\n     *\n     * @param {string} error - The wavesurfer error.\n     * @private\n     */\n    onWaveError(error) {\n        // notify listeners\n        this.player.trigger('error', error);\n\n        this.log(error, 'error');\n    }\n\n    /**\n     * Fired when the play toggle is clicked.\n     * @private\n     */\n    onPlayToggle() {\n        // workaround for video.js 6.3.1 and newer\n        if (this.player.controlBar.playToggle.hasClass('vjs-ended')) {\n            this.player.controlBar.playToggle.removeClass('vjs-ended');\n        }\n        if (this.surfer.isPlaying()) {\n            this.pause();\n        } else {\n            this.play();\n        }\n    }\n\n    /**\n     * Fired when the volume in the video.js player changes.\n     * @private\n     */\n    onVolumeChange() {\n        let volume = this.player.volume();\n        if (this.player.muted()) {\n            // muted volume\n            volume = 0;\n        }\n\n        // update wavesurfer.js volume\n        this.surfer.setVolume(volume);\n    }\n\n    /**\n     * Fired when the video.js player switches in or out of fullscreen mode.\n     * @private\n     */\n    onScreenChange() {\n        // execute with tiny delay so the player element completes\n        // rendering and correct dimensions are reported\n        var fullscreenDelay = this.player.setInterval(() => {\n            let isFullscreen = this.player.isFullscreen();\n            let newWidth, newHeight;\n            if (!isFullscreen) {\n                // restore original dimensions\n                newWidth = this.originalWidth;\n                newHeight = this.originalHeight;\n            }\n\n            if (this.waveReady) {\n                if (this.liveMode && !this.surfer.microphone.active) {\n                    // we're in live mode but the microphone hasn't been\n                    // started yet\n                    return;\n                }\n                // redraw\n                this.redrawWaveform(newWidth, newHeight);\n            }\n\n            // stop fullscreenDelay interval\n            this.player.clearInterval(fullscreenDelay);\n\n        }, 100);\n    }\n\n    /**\n     * Fired when the video.js player is resized.\n     *\n     * @private\n     */\n    onResizeChange() {\n        if (this.surfer !== undefined) {\n            // redraw waveform\n            this.redrawWaveform();\n        }\n    }\n\n    /**\n     * Redraw waveform.\n     *\n     * @param {number} [newWidth] - New width for the waveform.\n     * @param {number} [newHeight] - New height for the waveform.\n     * @private\n     */\n    redrawWaveform(newWidth, newHeight) {\n        if (!this.isDestroyed()) {\n            if (this.player.el_) {\n                let rect = this.player.el_.getBoundingClientRect();\n                if (newWidth === undefined) {\n                    // get player width\n                    newWidth = rect.width;\n                }\n                if (newHeight === undefined) {\n                    // get player height\n                    newHeight = rect.height;\n                }\n            }\n\n            // destroy old drawing\n            this.surfer.drawer.destroy();\n\n            // set new dimensions\n            this.surfer.params.width = newWidth;\n            this.surfer.params.height = newHeight - this.player.controlBar.height();\n\n            // redraw waveform\n            this.surfer.createDrawer();\n            this.surfer.drawer.wrapper.className = wavesurferClassName;\n            this.surfer.drawBuffer();\n\n            // make sure playhead is restored at right position\n            this.surfer.drawer.progress(this.surfer.backend.getPlayedPercents());\n        }\n    }\n\n    /**\n     * @private\n     */\n    log(args, logType) {\n        log(args, logType, this.debug);\n    }\n}\n\n// version nr is injected during build\nWavesurfer.VERSION = __VERSION__;\n\n// register plugin once\nvideojs.Wavesurfer = Wavesurfer;\nif (videojs.getPlugin('wavesurfer') === undefined) {\n    videojs.registerPlugin('wavesurfer', Wavesurfer);\n}\n\nmodule.exports = {\n    Wavesurfer\n};\n"],"sourceRoot":""}